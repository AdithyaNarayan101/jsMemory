{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"canvas-keyboard-response\",\n  parameters: {\n    /** The drawing function to apply to the canvas. Should take the canvas object as argument. */\n    stimulus: {\n      type: ParameterType.FUNCTION,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** Array containing the height (first value) and width (second value) of the canvas element. */\n    canvas_size: {\n      type: ParameterType.INT,\n      array: true,\n      pretty_name: \"Canvas size\",\n      default: [500, 500],\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **canvas-keyboard-response**\n *\n * jsPsych plugin for displaying a canvas stimulus and getting a keyboard response\n *\n * @author Chris Jungerius (modified from Josh de Leeuw)\n * @see {@link https://www.jspsych.org/plugins/jspsych-canvas-keyboard-response/ canvas-keyboard-response plugin documentation on jspsych.org}\n */\nclass CanvasKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html =\n      '<div id=\"jspsych-canvas-keyboard-response-stimulus\">' +\n      '<canvas id=\"jspsych-canvas-stimulus\" height=\"' +\n      trial.canvas_size[0] +\n      '\" width=\"' +\n      trial.canvas_size[1] +\n      '\"></canvas>' +\n      \"</div>\";\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n    let c = document.getElementById(\"jspsych-canvas-stimulus\");\n    trial.stimulus(c);\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-canvas-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-canvas-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default CanvasKeyboardResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","FUNCTION","pretty_name","default","undefined","choices","KEYS","prompt","HTML_STRING","stimulus_duration","INT","trial_duration","response_ends_trial","BOOL","canvas_size","array","CanvasKeyboardResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","new_html","innerHTML","c","document","getElementById","response","rt","end_trial","pluginAPI","clearAllTimeouts","keyboardListener","cancelKeyboardResponse","trial_data","finishTrial","getKeyboardResponse","callback_function","querySelector","className","valid_responses","rt_method","persist","allow_held_key","setTimeout","style","visibility","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","data","create_simulation_data","getDisplayElement","pressKey","default_data","randomization","sampleExGaussian","getValidKey","mergeSimulationData","ensureSimulationDataConsistency"],"mappings":"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"}